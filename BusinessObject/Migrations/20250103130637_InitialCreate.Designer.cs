// <auto-generated />
using System;
using DUVAS;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250103130637_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DUVAS.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verify")
                        .HasColumnType("bit");

                    b.HasKey("BuildingId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("DUVAS.CategoryRoom", b =>
                {
                    b.Property<int>("CategoryRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryRoomId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryRoomId");

                    b.ToTable("CategoryRooms");
                });

            modelBuilder.Entity("DUVAS.CategoryService", b =>
                {
                    b.Property<int>("CategoryServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryServiceId"));

                    b.Property<string>("CategoryServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryServiceId");

                    b.ToTable("CategoryServices");
                });

            modelBuilder.Entity("DUVAS.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<string>("ContractFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RentalDateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalDateTimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("DUVAS.OwnerLicense", b =>
                {
                    b.Property<int>("OwnerLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerLicenseId"));

                    b.Property<string>("OwnerLicense1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLicense2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLicense3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OwnerLicenseId");

                    b.HasIndex("UserId");

                    b.ToTable("OwnerLicenses");
                });

            modelBuilder.Entity("DUVAS.RentalList", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("RenterID")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("RentalId");

                    b.HasIndex("ContractId");

                    b.HasIndex("RenterID");

                    b.HasIndex("RoomId");

                    b.ToTable("RentalLists");
                });

            modelBuilder.Entity("DUVAS.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ServicePostId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("RoomId");

                    b.HasIndex("ServicePostId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DUVAS.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<double>("Acreage")
                        .HasColumnType("float");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Furniture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Garret")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPermission")
                        .HasColumnType("bit");

                    b.Property<string>("LocationDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBathroom")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBedroom")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CategoryRoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DUVAS.RoomLicense", b =>
                {
                    b.Property<int>("RoomLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomLicenseId"));

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("RoomLicense1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomLicense2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomLicense3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomLicenseId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomLicenses");
                });

            modelBuilder.Entity("DUVAS.ServiceFeedback", b =>
                {
                    b.Property<int>("ServiceFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceFeedbackId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServicePostId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("ServiceFeedbackId");

                    b.HasIndex("ServicePostId");

                    b.ToTable("ServiceFeedbacks");
                });

            modelBuilder.Entity("DUVAS.ServiceLicense", b =>
                {
                    b.Property<int>("ServiceLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceLicenseId"));

                    b.Property<string>("ServiceLicense1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceLicense2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ServiceLicenseId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceLicenses");
                });

            modelBuilder.Entity("DUVAS.ServicePost", b =>
                {
                    b.Property<int>("ServicePostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicePostId"));

                    b.Property<int>("CategoryServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicePostId");

                    b.HasIndex("CategoryServiceId");

                    b.ToTable("ServicePosts");
                });

            modelBuilder.Entity("DUVAS.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("IDThue")
                        .HasColumnType("int");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ServicePostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("IDThue");

                    b.HasIndex("RoomId");

                    b.HasIndex("ServicePostId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DUVAS.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleAdmin")
                        .HasColumnType("int");

                    b.Property<int?>("RoleLandlord")
                        .HasColumnType("int");

                    b.Property<int?>("RoleService")
                        .HasColumnType("int");

                    b.Property<int?>("RoleUser")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DUVAS.UserFeedback", b =>
                {
                    b.Property<int>("UserFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFeedbackId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("DUVAS.OwnerLicense", b =>
                {
                    b.HasOne("DUVAS.User", "User")
                        .WithMany("OwnerLicenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DUVAS.RentalList", b =>
                {
                    b.HasOne("DUVAS.Contract", "Contract")
                        .WithMany("RentalLists")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DUVAS.User", "User")
                        .WithMany("RentalLists")
                        .HasForeignKey("RenterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DUVAS.Room", "Room")
                        .WithMany("RentalLists")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DUVAS.Report", b =>
                {
                    b.HasOne("DUVAS.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DUVAS.ServicePost", "ServicePost")
                        .WithMany()
                        .HasForeignKey("ServicePostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DUVAS.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DUVAS.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("ServicePost");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DUVAS.Room", b =>
                {
                    b.HasOne("DUVAS.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DUVAS.CategoryRoom", null)
                        .WithMany("Rooms")
                        .HasForeignKey("CategoryRoomId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("DUVAS.RoomLicense", b =>
                {
                    b.HasOne("DUVAS.Room", "Room")
                        .WithMany("RoomLicenses")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DUVAS.ServiceFeedback", b =>
                {
                    b.HasOne("DUVAS.ServicePost", "ServicePost")
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("ServicePostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicePost");
                });

            modelBuilder.Entity("DUVAS.ServiceLicense", b =>
                {
                    b.HasOne("DUVAS.User", "User")
                        .WithMany("ServiceLicenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DUVAS.ServicePost", b =>
                {
                    b.HasOne("DUVAS.CategoryService", "CategoryService")
                        .WithMany("ServicePosts")
                        .HasForeignKey("CategoryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryService");
                });

            modelBuilder.Entity("DUVAS.Transaction", b =>
                {
                    b.HasOne("DUVAS.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("IDThue")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DUVAS.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DUVAS.ServicePost", "ServicePost")
                        .WithMany()
                        .HasForeignKey("ServicePostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("ServicePost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DUVAS.UserFeedback", b =>
                {
                    b.HasOne("DUVAS.User", "User")
                        .WithMany("UserFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DUVAS.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DUVAS.CategoryRoom", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DUVAS.CategoryService", b =>
                {
                    b.Navigation("ServicePosts");
                });

            modelBuilder.Entity("DUVAS.Contract", b =>
                {
                    b.Navigation("RentalLists");
                });

            modelBuilder.Entity("DUVAS.Room", b =>
                {
                    b.Navigation("RentalLists");

                    b.Navigation("RoomLicenses");
                });

            modelBuilder.Entity("DUVAS.ServicePost", b =>
                {
                    b.Navigation("ServiceFeedbacks");
                });

            modelBuilder.Entity("DUVAS.User", b =>
                {
                    b.Navigation("OwnerLicenses");

                    b.Navigation("RentalLists");

                    b.Navigation("Reports");

                    b.Navigation("ServiceLicenses");

                    b.Navigation("Transactions");

                    b.Navigation("UserFeedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
